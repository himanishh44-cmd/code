# Define CSV export path
$csvfile = "C:\Temp\IntuneWin32AppReport.csv"

# Define assignment target type identifiers
$AssignmentExclusionTarget   = "#microsoft.graph.exclusionGroupAssignmentTarget"
$AssignmentIncludeAllUsers   = "#microsoft.graph.allLicensedUsersAssignmentTarget"
$AssignmentIncludeAllDevices = "#microsoft.graph.allDevicesAssignmentTarget"

# Initialize result list
$appInfoList = @()

Write-Host "Getting the list of Win32 apps. Please wait..." -ForegroundColor Yellow
$apps = Get-MgBetaDeviceAppManagementMobileApp -Filter "isof('microsoft.graph.win32LobApp')" -All -ExpandProperty Assignments -ErrorAction Stop
Write-Host "Total Win32 apps found: $($apps.Count), extracting application data..." -ForegroundColor Cyan

foreach ($app in $apps) {
    $Assignments = "NONE"

    if ($app.Assignments) {
        $AssignmentLines = @()

        foreach ($Assignment in $app.Assignments) {
            $AssignmentIntent = $Assignment.intent
            $TargetType = $Assignment.target.AdditionalProperties."@odata.type"
            $AssignmentMode = "include"
            $AssignmentGroupName = ""

            switch ($TargetType) {
                $AssignmentExclusionTarget {
                    $AssignmentMode = "exclude"
                }
                $AssignmentIncludeAllUsers {
                    $AssignmentGroupName = "All users"
                }
                $AssignmentIncludeAllDevices {
                    $AssignmentGroupName = "All devices"
                }
                default {
                    if ($Assignment.target.AdditionalProperties.ContainsKey("groupId")) {
                        $GroupId = $Assignment.target.AdditionalProperties."groupId"
                        try {
                            $AssignmentGroupName = (Get-MgGroup -GroupId $GroupId -ErrorAction Stop).DisplayName
                        } catch {
                            Write-Host "Group ID $GroupId on app '$($app.DisplayName)' no longer exists!" -ForegroundColor Red
                            $AssignmentGroupName = "$GroupId_NOTEXIST"
                        }
                    } else {
                        $AssignmentGroupName = "UNKNOWN"
                    }
                }
            }

            $AssignmentLine = "$AssignmentIntent / $AssignmentMode / $AssignmentGroupName"
            $AssignmentLines += $AssignmentLine
        }

        $Assignments = $AssignmentLines -join "`n"
    }

    # Detection Rules
    $detectionRules = @()
    $detectionDetails = @()

    if ($null -ne $app.AdditionalProperties.detectionRules) {
        foreach ($rule in $app.AdditionalProperties.detectionRules) {
            switch ($rule.'@odata.type') {
                "#microsoft.graph.win32LobAppProductCodeDetection" {
                    $detectionRules += "MSI"
                    $detectionDetails += "MSI ProductCode: $($rule.productCode)"
                }
                "#microsoft.graph.win32LobAppRegistryDetection" {
                    $detectionRules += "Registry"
                    $detectionDetails += "Registry: $($rule.keyPath)\$($rule.valueName) | Type: $($rule.detectionType)"
                }
                "#microsoft.graph.win32LobAppFileSystemDetection" {
                    $detectionRules += "FileSystem"
                    $detectionDetails += "FileSystem: $($rule.path)\$($rule.fileOrFolderName) | Type: $($rule.detectionType)"
                }
                "#microsoft.graph.win32LobAppPowerShellScriptDetection" {
                    $detectionRules += "Script"
                    $detectionDetails += "Script (truncated): $($rule.scriptContent.Substring(0, [math]::Min(100, $rule.scriptContent.Length)))"
                }
                default {
                    $detectionRules += "Unknown"
                    $detectionDetails += "Unknown rule type: $($rule.'@odata.type')"
                }
            }
        }
    }

    $detectionRulesString = $detectionRules -join ", "
    $detectionDetailsString = $detectionDetails -join " | "

    # Requirement Rules
    $requirementRules = @()
    $requirementDetails = @()

    if ($null -ne $app.AdditionalProperties.requirementRules) {
        foreach ($rule in $app.AdditionalProperties.requirementRules) {
            switch ($rule.'@odata.type') {
                "#microsoft.graph.win32LobAppPowerShellScriptRequirement" {
                    $requirementRules += "Script"
                    $requirementDetails += "Script: $($rule.displayName)"
                }
                "#microsoft.graph.win32LobAppRegistryRequirement" {
                    $requirementRules += "Registry"
                    $requirementDetails += "Registry: $($rule.keyPath)\$($rule.valueName)"
                }
                "#microsoft.graph.win32LobAppFileSystemRequirement" {
                    $requirementRules += "FileSystem"
                    $requirementDetails += "FileSystem: $($rule.path)\$($rule.fileOrFolderName)"
                }
                "#microsoft.graph.win32LobAppProductCodeRequirement" {
                    $requirementRules += "MSI"
                    $requirementDetails += "MSI Requirement"
                }
                default {
                    $requirementRules += "Unknown"
                    $requirementDetails += "Unknown rule type: $($rule.'@odata.type')"
                }
            }
        }
    }

    $requirementRulesString = $requirementRules -join ", "
    $requirementDetailsString = $requirementDetails -join " | "

    $appInfoList += [PSCustomObject]@{
        DisplayName           = $app.DisplayName
        DisplayVersion        = $app.AdditionalProperties.displayVersion
        Description           = $app.Description
        Publisher             = $app.Publisher
        SetupFilePath         = $app.AdditionalProperties.setupFilePath
        InstallCommandLine    = $app.AdditionalProperties.installCommandLine
        UninstallCommandLine  = $app.AdditionalProperties.uninstallCommandLine
        AllowedArchitectures  = $app.AdditionalProperties.allowedArchitectures
        DetectionRules        = $detectionRulesString
        DetectionDetails      = $detectionDetailsString
        RequirementRules      = $requirementRulesString
        RequirementDetails    = $requirementDetailsString
        HasDependencies       = if ($app.dependentAppCount -gt 0) { "Yes" } else { "No" }
        CreatedDateTime       = ([datetime]$app.createdDateTime).ToLocalTime().ToString("MM/dd/yyyy HH:mm:ss")
        LastModifiedDateTime  = ([datetime]$app.lastModifiedDateTime).ToLocalTime().ToString("MM/dd/yyyy HH:mm:ss")
        Owner                 = $app.Owner
        Developer             = $app.Developer
        Notes                 = $app.Notes
        UploadState           = $app.UploadState
        PublishingState       = $app.PublishingState
        IsAssigned            = $app.IsAssigned
        Assignments           = $Assignments
        AppId                 = $app.Id
    }
}

# Export to CSV
$appInfoList | Export-Csv -Path $csvfile -NoTypeInformation -Encoding UTF8

Write-Host ""
Write-Host "âœ… Script completed. CSV file created at: $csvfile" -ForegroundColor Green
